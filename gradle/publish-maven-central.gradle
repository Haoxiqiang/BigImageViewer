/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2021 Piasy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// Credit: https://gist.github.com/zsmb13/bc5957f7d0072742d9c0c2f6b704b3e4

apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
  archiveClassifier.set('sources')
  if (project.plugins.findPlugin("com.android.library")) {
    from android.sourceSets.main.java.srcDirs
    //from android.sourceSets.main.kotlin.srcDirs
  } else {
    from sourceSets.main.java.srcDirs
    //from sourceSets.main.kotlin.srcDirs
  }
}

artifacts {
  archives androidSourcesJar
  //archives javadocJar
}


group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
  Properties p = new Properties()
  p.load(new FileInputStream(secretPropsFile))
  p.each { name, value ->
    ext[name] = value
  }
} else {
  ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
  ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
  ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
  ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
  ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
  ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

publishing {
  publications {
    release(MavenPublication) {
      groupId PUBLISH_GROUP_ID
      artifactId project.getName()
      version PUBLISH_VERSION

      if (project.plugins.findPlugin("com.android.library")) {
        artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
      } else {
        artifact("$buildDir/libs/${project.getName()}-${version}.jar")
      }

      artifact androidSourcesJar

      pom {
        name = project.getName()
        description = artifactDescription
        url = "https://github.com/Piasy/${rootProject.ext.projectName}"
        licenses {
          license {
            name = 'The MIT License (MIT)'
            url = 'http://opensource.org/licenses/MIT'
          }
        }
        developers {
          developer {
            id   = 'Piasy'
            name = 'Piasy Xu'
            email= 'xz4215@gmail.com'
          }
        }
        scm {
          connection = "scm:git:github.com/Piasy/${rootProject.ext.projectName}.git"
          developerConnection = "scm:git:ssh://github.com/Piasy/${rootProject.ext.projectName}.git"
          url = "https://github.com/Piasy/${rootProject.ext.projectName}"
        }
        withXml {
          def dependenciesNode = asNode().appendNode('dependencies')

          project.configurations.implementation.allDependencies.each {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)
          }
        }
      }
    }
  }
  repositories {
    maven {
      name = "sonatype"
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

      credentials {
        username ossrhUsername
        password ossrhPassword
      }
    }
  }
}

signing {
  sign publishing.publications
}

nexusStaging {
  packageGroup = PUBLISH_GROUP_ID
  stagingProfileId = sonatypeStagingProfileId
  username = ossrhUsername
  password = ossrhPassword
}
